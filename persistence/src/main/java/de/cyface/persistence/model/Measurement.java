package de.cyface.persistence.model;

import androidx.annotation.NonNull;
import de.cyface.persistence.serialization.MeasurementSerializer;

/**
 * An object of this class represents a single {@link Measurement} captured by the {@code DataCapturingService}. This
 * usually happens between complementary calls to
 * {@code DataCapturingService#start(DataCapturingListener, Vehicle, StartUpFinishedHandler)} and
 * {@code DataCapturingService#stop(ShutDownFinishedHandler)}.
 *
 * @author Klemens Muthmann
 * @author Armin Schnabel
 * @version 1.2.1
 * @since 1.0.0
 */
public final class Measurement {

    /**
     * The system wide unique identifier of this {@link Measurement}. Usually this value is generated by a data store
     * (i.e. database).
     */
    private Long id;
    /**
     * The {@link MeasurementStatus} of the {@link Measurement}. Usually only one measurement should be in the
     * {@link MeasurementStatus#OPEN} or {@link MeasurementStatus#PAUSED} state, else there has been some error.
     */
    private MeasurementStatus status;
    /**
     * The {@link Vehicle} used in this {@link Measurement}.
     */
    private Vehicle vehicle;
    /**
     * The number of acceleration {@link Point3d}s persisted for this {@link Measurement}.
     */
    private int accelerations;
    /**
     * The number of rotation {@link Point3d}s persisted for this {@link Measurement}.
     */
    private int rotations;
    /**
     * The number of direction {@link Point3d}s persisted for this {@link Measurement}.
     */
    private int directions;
    /**
     * The {@link MeasurementSerializer#PERSISTENCE_FILE_FORMAT_VERSION} used to serialize the data in the file
     * persistence layer of for this {@link Measurement}.
     */
    private short fileFormatVersion;
    /**
     * The distance of this {@link Measurement} based on its {@link GeoLocation}s in meters.
     */
    private double distance;

    /**
     * Creates a new completely initialized {@link Measurement}.
     *
     * @param id The system wide unique identifier of this {@code Measurement}. Usually this value is generated by a
     *            data store (i.e. database).
     * @param status The {@link MeasurementStatus} of the {@link Measurement}. Usually only one measurement should be in
     *            the {@link MeasurementStatus#OPEN} or {@link MeasurementStatus#PAUSED} state, else there has been some
     *            error.
     * @param vehicle The {@link Vehicle} used in this {@link Measurement}.
     * @param accelerations The number of acceleration {@link Point3d}s persisted for this {@link Measurement}.
     * @param rotations The number of rotation {@link Point3d}s persisted for this {@link Measurement}.
     * @param directions The number of direction {@link Point3d}s persisted for this {@link Measurement}.
     * @param fileFormatVersion The {@link MeasurementSerializer#PERSISTENCE_FILE_FORMAT_VERSION} used to serialize the
     *            data in the file persistence layer of for this {@link Measurement}.
     * @param distance The distance of this {@link Measurement} based on its {@link GeoLocation}s in meters.
     */
    public Measurement(final long id, @NonNull final MeasurementStatus status, @NonNull final Vehicle vehicle,
            final int accelerations, final int rotations, final int directions, final short fileFormatVersion,
            final double distance) {
        this.id = id;
        this.status = status;
        this.vehicle = vehicle;
        this.accelerations = accelerations;
        this.rotations = rotations;
        this.directions = directions;
        this.fileFormatVersion = fileFormatVersion;
        this.distance = distance;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        Measurement that = (Measurement)o;
        return accelerations == that.accelerations && rotations == that.rotations && directions == that.directions
                && fileFormatVersion == that.fileFormatVersion && Double.compare(that.distance, distance) == 0
                && id.equals(that.id) && status == that.status && vehicle == that.vehicle;
    }

    @Override
    public int hashCode() {
        return (int)(id ^ (id >>> 32));
    }

    public long getIdentifier() {
        return id;
    }

    public MeasurementStatus getStatus() {
        return status;
    }

    public Vehicle getVehicle() {
        return vehicle;
    }

    public int getAccelerations() {
        return accelerations;
    }

    public int getRotations() {
        return rotations;
    }

    public int getDirections() {
        return directions;
    }

    public short getFileFormatVersion() {
        return fileFormatVersion;
    }

    public double getDistance() {
        return distance;
    }

    @Override
    public String toString() {
        return "Measurement{" + "id=" + id + ", status=" + status + ", vehicle=" + vehicle + ", accelerations="
                + accelerations + ", rotations=" + rotations + ", directions=" + directions + ", fileFormatVersion="
                + fileFormatVersion + ", distance=" + distance + '}';
    }
}
