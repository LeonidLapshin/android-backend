/**
 * <p>
 * Gradle's build file for the module which holds all our instrumented tests.
 * </p>
 *
 * @author Armin Schnabel
 * @version 2.0.0
 * @since 1.0.0
 */
/**
 * This module uses the android test plugin which allows us to have the measuring-client module
 * as dependency (to test it) which builds itself to an apk and is usually not dependable.
 * - A test-only module cannot have a test APK itself so it cannot have a src/androidTest folder.
 * - Also, there are no variants for test modules so if you have different flavors in your main application,
 *      you need a different test module for each variant you want to test.
 * - Only Instrumentation-based tests are allowed in a test-only module.
 * Source: https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint
 */
apply plugin: 'com.android.test'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        // The package name of the test app
        testApplicationId "de.cyface.integration_test"

        versionCode 1 // this must be incremented if new apk should be pushed to play store
        versionName "2.0.0" // this is shown to the users, see Confluence/Android Client for naming guideline

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    // Sets the target app module which contains the production code the integration test runs against.
    targetProjectPath ':app'
    targetVariant 'debug'
}

// In the _com.android.test_ plugin you can only have _implementation_. - still valid?
// - Error "JUnit version 3.8 or later expected" => manually create a run config as "Instrumented Test" - still valid?
dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Dependencies for local unit tests
    // - If Junit symbols are not resolvable in IntelliJ, make sure Build Variant is set to debug
    // - Loading another dependency (e.g. module) only it's production dependencies (compile) are loaded but not other dependencies (e.g. testCompile)
    //implementation 'com.android.support:appcompat-v7:' + rootProject.ext.junitVersion - auto generated by Android Studio
    implementation "junit:junit:${rootProject.ext.junitVersion}"
    implementation "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
    // Optional - For better debuggable asserts
    // - hamcrest-all does not work with com.android.test (integration test) - still valid?
    implementation "org.hamcrest:java-hamcrest:${rootProject.ext.hamcrestVersion}"

    // Dependencies for instrumentation tests
    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    compile "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    compile "com.android.support.test:runner:${rootProject.ext.runnerVersion}"
    compile "com.android.support.test:rules:${rootProject.ext.rulesVersion}"
}
