/**
 * Gradle's build file for the module which synchronizes the sensor data.
 *
 * @author Armin Schnabel
 * @version 1.0.0
 * @since 2.2.0
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1 // this must be incremented if new apk should be pushed to play store
        // this is shown to the users, see Confluence/Android Client for naming guideline
        versionName rootProject.ext.version

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "project", "mode"

    productFlavors {
        // Configurations in the "project" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        movebis {
            dimension "project"
            versionNameSuffix "-full"
        }
        cyface {
            dimension "project"
            versionNameSuffix "-cyface"
        }

        mock {
            dimension "mode"
        }

        full {
            dimension "mode"
        }
    }

    // Enable Proguard for the release build type.
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"

    // Dependencies for local unit tests
    // - If Junit symbols are not resolvable in IntelliJ, make sure Build Variant is set to debug
    // - Loading another dependency (e.g. module) only it's production dependencies (compile) are loaded but not other dependencies (e.g. testCompile)
    //implementation 'com.android.support:appcompat-v7:' + rootProject.ext.junitVersion - auto generated by Android Studio
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
    // Optional - For better debuggable asserts
    testImplementation "org.hamcrest:hamcrest-all:${rootProject.ext.hamcrestVersion}"

    // Dependencies for instrumentation tests
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    androidTestImplementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    androidTestImplementation "com.android.support.test:runner:${rootProject.ext.runnerVersion}"
    androidTestImplementation "com.android.support.test:rules:${rootProject.ext.rulesVersion}"
}
