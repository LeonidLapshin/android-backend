import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

/**
 * Gradle's build file for the module which synchronizes the sensor data.
 *
 * @author Armin Schnabel
 * @author Klemens Muthmann
 * @version 2.0.1
 * @since 1.0.0
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1 // this must be incremented if new apk should be pushed to play store
        // this is shown to the users, see Confluence/Android Client for naming guideline
        versionName "2.0.0"

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    flavorDimensions "app"

    productFlavors {
        mock {
            dimension "app"
            versionNameSuffix "-mock"
        }
        full {
            dimension "app"
            versionNameSuffix "-full"
        }
    }

    // Required by roboletric
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":persistence")
    implementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"

    // Dependencies for instrumentation tests
    androidTestImplementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    androidTestImplementation "com.android.support.test:runner:${rootProject.ext.runnerVersion}"
    androidTestImplementation "com.android.support.test:rules:${rootProject.ext.rulesVersion}"

    // Dependencies for local unit tests
    // - If Junit symbols are not resolvable in IntelliJ, make sure Build Variant is set to debug
    // - Loading another dependency (e.g. module) only it's production dependencies (compile) are loaded but not other dependencies (e.g. testCompile)
    //implementation 'com.android.support:appcompat-v7:' + rootProject.ext.junitVersion - auto generated by Android Studio
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
    // Optional - For better debuggable asserts
    testImplementation "org.hamcrest:hamcrest-all:${rootProject.ext.hamcrestVersion}"

    testImplementation "org.robolectric:robolectric:${rootProject.ext.robolectricVersion}"
    androidTestImplementation project(path: ':datacapturing')
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
